package pl.edu.pjwstk.p2pp.debug.processor;

import java.util.Hashtable;
import org.apache.log4j.Logger;

import pl.edu.pjwstk.p2pp.debug.DebugInformation;
import pl.edu.pjwstk.p2pp.debug.processor.subsystems.SubSystemFactoryFunctor;
import pl.edu.pjwstk.p2pp.debug.processor.subsystems.SubSystemWrapper;
import pl.edu.pjwstk.p2pp.debug.processor.subsystems.writers.IWriter;
import pl.edu.pjwstk.p2pp.debug.processor.subsystems.writers.RawTextWriter;

/**
 * Provides an application writing debug information generated by P2PP entities.
 *
 * @author Konrad Adamczyk conrad.adamczyk@gmail.com
 */

public final class DebugWriter {

    /*
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * Constants
     *
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */

    /**
     * Instance of org.apache.log4j.Logger
     */
    private static final Logger LOG = Logger.getLogger(DebugWriter.class);

    /**
     * Option indicating writer subsystem name.
     */
    public final static byte WRITER_SUBSYSTEM = 0;

    /**
     * Option indicating writer subsystem settings.
     * {@link pl.edu.pjwstk.p2pp.debug.processor.subsystems.writers.IWriter#init(java.lang.Object[])}
     */
    public final static byte WRITER_SUBSYSTEM_SETTINGS = 1;

    /*
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * Data members
     *
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */

    /**
     * Instance of DebugWriter.
     */
    private static DebugWriter _instance;
    
    /**
     * Instance of writer subsystem specified in DebugWriter.options, implementing
     * {@link pl.edu.pjwstk.p2pp.debug.processor.subsystems.writers.IWriter} interface.
     */
    private static IWriter writer;

    /**
     * DebugWriter's options.
     */
    private static Hashtable<Byte, Object> options = new Hashtable<Byte, Object>()
    {
        private static final long serialVersionUID = 1L;
        {
            put(WRITER_SUBSYSTEM, "RawTextWriter");
            put(WRITER_SUBSYSTEM_SETTINGS, new Object[]{"logs/debug.log", RawTextWriter.OVERWRITE, 128});
        }
    };
    
    /*
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * Constructors
     *
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */

    /**
     * Constructs a new DebugWriter. Unused because the class is indended to be a singleton.
     */
    private DebugWriter() {}

    /*
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * Methods
     *
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */

    /**
     * Return DebugWriter instance creating one if is not yet instantiated.
     *
     * @return DebugWriter instance
     */
    public static DebugWriter makeInstance() {
        if (!isInstantiated()) {
            _instance = new DebugWriter();
            if (LOG.isInfoEnabled()) LOG.info("DebugWriter started");
            setWriteSubSystem((String)options.get(WRITER_SUBSYSTEM),
                    (Object[])options.get(WRITER_SUBSYSTEM_SETTINGS));
            writer.start();
        }
        return _instance;
    }

    /**
     * Indicated whether DebugWriter is instantiated.
     *
     * @return
     */
    public static boolean isInstantiated() {
        return _instance != null;
    }

    /**
     * Returns value of the given option.
     *
     * @param option Option specified by one of DebugWriter's static bytes
     *
     * @return Option's value
     */
    public static Object getOption(byte option) {
        try {
            return options.get(option);
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new IllegalArgumentException("Argument 1 passed to DebugWriter#setOption() must be " +
                    "a valid option byte");
        }
    }

    /**
     * Set specified option with a given value.
     *
     * @param option Option specified by one of DebugWriter's static bytes
     *
     * @param value Value for the option to be set
     */
    public static void setOption(byte option, Object value) {
        Object currentValue;
        if (null == (currentValue = options.get(option))) {
            throw new IllegalArgumentException("Argument 1 passed to DebugWriter#setOption() must be" +
                    " a valid option byte");
        }
        if (null == value) {
            throw new IllegalArgumentException("Argument 2 passed to DebugWriter#setOption() cannot " +
                    "be null");
        }
        if (!currentValue.getClass().equals(value.getClass())) {
            throw new IllegalArgumentException("Argument 2 passed to DebugWriter#setOption() must be" +
                    " of " + currentValue.getClass() + " type");
        }
        options.put(option, value);
    }
    
    /**
     * Sets {@link pl.edu.pjwstk.p2pp.debug.processor.subsystems.SubSystem} to be used for writing
     * debug information.
     *
     * @param subSystemName Name of the class implementing {@link pl.edu.pjwstk.p2pp.debug.processor.subsystems.writers.IWriter}
     * interface, located in pl.edu.pjwstk.p2pp.debug.processor.subsystems.writers package to be used
     * for writing debug information
     *
     * @param settings SubSystem's settings
     */
    public static void setWriteSubSystem(String subSystemName, Object[] settings) {
        try {
            Class<?> factoryClass = Class.forName("pl.edu.pjwstk.p2pp.debug.processor.subsystems.writers."
                    + subSystemName);
            SubSystemFactoryFunctor subSystemFactory = (SubSystemFactoryFunctor) factoryClass.newInstance();
            SubSystemWrapper.setFactory(subSystemFactory);
            SubSystemWrapper.setInstance(null);
            writer = (IWriter) SubSystemWrapper.instance();
            writer.init(settings);
        } catch (ClassNotFoundException e) {
            throw new IllegalArgumentException("Argument 1 passed to DebugWriter.setWriteModule()" +
                    " must be a existing write module implementing IWriter interface");
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    /**
     * Sends writer subsystem a debug information to be written.
     *
     * @param debugInfo Debug information being a {@link DebugInformation} object.
     */
    public static void writeDebugInformation(DebugInformation debugInfo) {
        if (!isInstantiated()) return;
        writer.writeDebugInformation(debugInfo);
    }

}
