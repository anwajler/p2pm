package pl.edu.pjwstk.p2pp.messages.requests;

import java.util.Vector;

import pl.edu.pjwstk.p2pp.messages.P2PPMessage;
import pl.edu.pjwstk.p2pp.messages.responses.BootstrapResponse;
import pl.edu.pjwstk.p2pp.messages.responses.Response;
import pl.edu.pjwstk.p2pp.objects.AddressInfo;
import pl.edu.pjwstk.p2pp.objects.GeneralObject;
import pl.edu.pjwstk.p2pp.objects.P2POptions;
import pl.edu.pjwstk.p2pp.objects.PeerID;
import pl.edu.pjwstk.p2pp.objects.PeerInfo;
import pl.edu.pjwstk.p2pp.objects.RequestOptions;
import pl.edu.pjwstk.p2pp.objects.UnhashedID;
import pl.edu.pjwstk.p2pp.objects.UnsupportedGeneralObjectException;
import pl.edu.pjwstk.p2pp.util.ByteUtils;

/**
 * Class wrapping up data of bootstrap request (as defined by P2PP specification draft 01).
 * 
 * @author Maciej Skorupka s3874@pjwstk.edu.pl
 * 
 */
public class BootstrapRequest extends Request {

	private PeerInfo originatorPeerInfo;

	/**
	 * Empty constructor used for creating this object but filling it with data later.
	 */
	public BootstrapRequest() {}

	/**
	 * Constructor for Bootstrap request. Source ID is not given as argument because it's constant and uses only 4 bytes
	 * and each of them is 0.
	 * 
	 * @param protocolVersion
	 * @param isAcknowledgment
	 * @param isSentByPeer
	 * @param isRecursive
	 * @param ttl
	 * @param transactionID
	 * @param isOverReliable
	 * @param isEncrypted
	 * @param peerInfo
	 */
	public BootstrapRequest(boolean[] protocolVersion, boolean isAcknowledgment, boolean isSentByPeer,
			boolean isRecursive, byte ttl, byte[] transactionID, boolean isOverReliable, boolean isEncrypted,
			PeerInfo peerInfo) {
		super(protocolVersion, isAcknowledgment, isSentByPeer, isRecursive, P2PPMessage.BOOTSTRAP_MESSAGE_TYPE, ttl,
				transactionID, new byte[4], isOverReliable, isEncrypted);
		this.originatorPeerInfo = peerInfo;
	}

	@Override
	public byte[] asBytes() {
		return asBytes(getBitsCount());
	}

	@Override
	protected byte[] asBytes(int bitsCount) {
		byte[] bytes = super.asBytes(bitsCount);

		int currentIndex = super.getBitsCount();

		ByteUtils.addByteArrayToArrayAtByteIndex(originatorPeerInfo.asBytes(), bytes, currentIndex / 8);
		// currentIndex += peerInfo.getBitsCount();

		return bytes;
	}

	@Override
	public int getBitsCount() {
		return super.getBitsCount() + originatorPeerInfo.getBitsCount();
	}

	@Override
	public RequestOptions getRequestOptions() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void addObject(GeneralObject object) throws UnsupportedGeneralObjectException {
		if (object instanceof PeerInfo) {
			if (originatorPeerInfo == null) {
				originatorPeerInfo = (PeerInfo) object;
			} else {
				throw new UnsupportedGeneralObjectException("BootstrapRequest can't handle more objects.");
			}
		} else {
			throw new UnsupportedGeneralObjectException("BootstrapRequest can't handle " + object.getClass().getName()
					+ " objects.");
		}
	}

	/**
	 * Creates response for this message. To be used when consuming. Response is responseACK (not acknowledgment) type
	 * with some same properties as this message: byPeer, recursive, ttl, transactionID, overReliable and encrypted.
	 * Sender of this message becomes receiver of response. Response contains PeerInfo object from this object. This
	 * object is to be filled with new PeerID generated by bootstrap server. Response contains given response code.
	 * PeerInfo given as argument is added to response as peer info of bootstrap peer. TODO should be forwarded to
	 * message originator in when iterative routing is used.
	 * 
	 * @param responseCode
	 *            Response code to set in response. Constants for response codes are defined in {@link Response} class.
	 * @param bootstrapPeerInfo
	 * @param options
	 * @param peerIDValue
	 *            Peer ID value to be added to response (to PeerID object, to be precise).
	 * @return Response for this message.
	 */
	public BootstrapResponse createResponse(boolean[] responseCode, PeerInfo bootstrapPeerInfo, P2POptions options,
			byte[] peerIDValue) {

		PeerInfo bootstrapPeerInfoCopy = new PeerInfo(bootstrapPeerInfo.getPeerID(), bootstrapPeerInfo.getUptime(),
				bootstrapPeerInfo.getAddressInfos(), bootstrapPeerInfo.getUnhashedID());
		PeerInfo originatorPeerInfoCopy = new PeerInfo(new PeerID(peerIDValue), null, originatorPeerInfo
				.getAddressInfos(), originatorPeerInfo.getUnhashedID());
		BootstrapResponse response = new BootstrapResponse(protocolVersion, P2PPMessage.RESPONSE_ACK_MESSAGE_TYPE,
				false, byPeer, recursive, responseCode, ttl, transactionID, overReliable, encrypted,
				bootstrapPeerInfoCopy, originatorPeerInfoCopy, options);
		originatorPeerInfo.getPeerID().setPeerIDBytes(peerIDValue);
		response.setReceiverPort(senderPort);
		response.setReceiverAddress(senderAddress);
		return response;
	}

	/**
	 * Returns PeerInfo included in this request.
	 * 
	 * @return
	 */
        @Override
	public PeerInfo getPeerInfo() {
		return originatorPeerInfo;
	}

	@Override
	public boolean verify() {
		boolean result = true;

		// has to contain sourceID being four bytes long
		if (sourceID == null || sourceID.length != 4) {
			result = false;
		} // has to contain PeerInfo object
		else if (originatorPeerInfo == null) {
			result = false;
		} else {
			// must contain peerID
			PeerID peerID = originatorPeerInfo.getPeerID();
			if (peerID == null) {
				result = false;
			} else {
				if (peerID.getPeerIDBytes() == null) {
					result = false;
				}
			}
			// not checked if peerID isn't here
			if (result) {
				// must contain unshadedID
				UnhashedID unhashedID = originatorPeerInfo.getUnhashedID();
				if (unhashedID == null) {
					result = false;
				} else {
					if (unhashedID.getUnhashedIDValue() == null) {
						result = false;
					}
				}
			}
			// not checked if PeerID or UnhashedID isn't here
			if (result) {
				// has to contain at least one AddressInfo
				Vector<AddressInfo> addressInfos = originatorPeerInfo.getAddressInfos();
				if (addressInfos == null) {
					result = false;
				} else if (addressInfos.size() <= 0) {
					result = false;
				}
			}

		}

		return result;
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder("BootstrapRequest=[message=[" + super.toString() + "], header=["
				+ getHeader() + "], request originator=[");
		if (originatorPeerInfo != null) {
			builder.append(originatorPeerInfo.toString());
                        builder.append("]]");
		} else {
			builder.append(originatorPeerInfo);
                        builder.append("]]");
		}
		return builder.toString();
	}
}
